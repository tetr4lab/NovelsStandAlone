@using System.ComponentModel
@inherits NovelsComponentBase

<MudItem>
    <MudText Class="pr-8" Typo="Typo.h4">Novels</MudText>
</MudItem>
<style>
    nav button[disabled] { background-color: var(--mud-palette-background-gray); }
    nav button[disabled] .mud-icon-root { color: var(--mud-palette-primary); }
    nav button[disabled] .mud-typography { color: var(--mud-palette-primary); }
</style>
<MudItem>
    <MudButton Disabled="@(AppModeService.CurrentMode == AppMode.Books)" OnClick="@(() => RequestMode (AppMode.Books))" StartIcon="@Icons.Material.Filled.LibraryBooks" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Books</MudText></MudButton>
</MudItem>
<MudItem>
    <MudButton Disabled="@(AppModeService.CurrentMode == AppMode.Issue)" OnClick="@(() => RequestMode (AppMode.Issue))" StartIcon="@Icons.Material.Filled.Sync" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Issue</MudText></MudButton>
</MudItem>
<MudItem>
    <MudButton Disabled="@(AppModeService.CurrentMode == AppMode.Contents)" OnClick="@(() => RequestMode (AppMode.Contents))" StartIcon="@Icons.Material.Filled.ViewHeadline" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Contents</MudText></MudButton>
</MudItem>
<MudItem>
    <MudButton Disabled="@(AppModeService.CurrentMode == AppMode.Read)" OnClick="@(() => RequestMode (AppMode.Read))" StartIcon="@Icons.Material.Filled.MenuBook" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Read</MudText></MudButton>
</MudItem>
<MudItem>
    <MudButton Disabled="@(AppModeService.CurrentMode == AppMode.Settings)" OnClick="@(() => RequestMode (AppMode.Settings))" StartIcon="@Icons.Material.Filled.Settings" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Settings</MudText></MudButton>
</MudItem>
<MudSpacer />
@if (RevisionInfo.Valid) {
    <MudItem Class="mr-4 align-self-end">
        <MudText Style="font-size:var(--mud-typography-caption-size); color:var(--mud-palette-action-disabled);">
            @($"revision: {RevisionInfo.Branch} - {RevisionInfo.Id}")
        </MudText>
    </MudItem>
}
<MudItem>
    <MudStack Row Class="align-center">
        <MudTooltip Arrow Duration="1000">
            <ChildContent>
                <MudTextField @bind-Value="_filterText" @ref="searchField"
                OnKeyUp="OnKeyUpAsync"
                OnBlur="OnClickAsync"
                OnAdornmentClick="OnClickAsync" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                OnClearButtonClick="OnClearAsync" Clearable 
                Label="Search" Margin="Margin.Dense" Variant="Variant.Outlined" Underline="false" />
            </ChildContent>
            <TooltipContent>
                <MudText Typo="Typo.inherit" Align="Align.Left">
                    <p>検索文字列</p>
                    <p>空白文字で区切られた部分が全て含まれると適合します。</p>
                    <p>'␣'(U+2423)または'&nbsp;'(U+00A0)は区切られない空白文字として使えます。</p>
                    <p>'='が先行する部分は一致すると適合します。</p>
                    <p>'!'が先行する部分は一致すると適合しません。</p>
                    <p>'^'が先行する部分は含まれると適合しません。</p>
                    <p>'|'で区切られた部分はいずれか一つで適合します。</p>
                    <p>'#~.'@(Book.TableLabel)@(Book.Label [nameof (Book.Id)])</p>
                    <p>':~.'@(Book.Label [nameof (Book.Site)])</p>
                    <p>'%~.'@(Book.Label [nameof (Book.NumberOfRelatedSheets)])</p>
                    <p>'_is_issued_'/'_not_issued_'@(Book.Label [nameof (Book.IsUpToDateWithIssued)])</p>
                    <p>'_is_readed_'/'_not_readed_'@(Book.Label [nameof (Book.Readed)])</p>
                    <p>'_is_wished_'/'_not_wished_'@(Book.Label [nameof (Book.Wish)])</p>
                    <p>'_<i>status</i>_'@(Book.Label [nameof (Book.Status)])</p>
                </MudText>
            </TooltipContent>
        </MudTooltip>
        @if (!OnClickChangeModeButton.Equals (EventCallback.Empty)) {
            <MudTooltip Text="テーマ" Arrow Duration="1000">
                <MudIconButton Size="Size.Small" Icon="@(IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" OnClick="(async () => await OnClickChangeModeButton.InvokeAsync ())" />
            </MudTooltip>
        }
    </MudStack>
</MudItem>

@code {
    /// <summary>ダークモード</summary>
    [CascadingParameter (Name = "IsDarkMode")] public bool IsDarkMode { get; set; }
    /// <summary>モード切替ボタンが押されたときの処理</summary>
    [CascadingParameter (Name = "ChangeModeAsync")] public EventCallback OnClickChangeModeButton { get; set; } = EventCallback.Empty;

    /// <summary>検索文字列</summary>
    private string _filterText = string.Empty;

    /// <summary>検索フィールドへの参照</summary>
    private MudTextField<string> searchField { get; set; } = new MudTextField<string>();

    /// <summary>検索フィールドでキーが押された</summary>
    protected async Task OnKeyUpAsync (KeyboardEventArgs eventArgs) {
        if (eventArgs.Key == "Enter") {
            await OnClickAsync();
        }
    }

    /// <summary>アプリモードが変化した</summary>
    protected override async void OnAppModeChanged (object? sender, PropertyChangedEventArgs e) {
        if (e.PropertyName == "FilterText" && sender is NovelsAppModeService service) {
            _filterText = service.FilterText;
            await InvokeAsync (StateHasChanged);
        }
    }

    /// <summary>フィールドクリアボタンが押された</summary>
    public async Task OnClearAsync () {
        await OnSearchAsync (string.Empty);
    }

    /// <summary>検索ボタンが押された</summary>
    public async Task OnClickAsync () {
        if (AppModeService.FilterText != _filterText) {
            await OnSearchAsync (_filterText);
        }
    }

    /// <summary>検索文字列の変更を実施</summary>
    public async Task OnSearchAsync (string filter) {
        if (_isFilterLocked) { return; }
        _isFilterLocked = true;
        UiState.Lock ();
        await InvokeAsync (StateHasChanged);
        await searchField.BlurAsync ();
        AppModeService.SetFilterText (filter);
        UiState.Unlock ();
        await InvokeAsync (StateHasChanged);
        _isFilterLocked = false;
    }
    protected bool _isFilterLocked;

    /// <summary>モード変更要求</summary>
    protected void RequestMode (AppMode mode) {
        AppModeService.RequestMode (mode);
    }
}
